// Generated by CoffeeScript 1.4.0
(function() {

  LOAF.ListSingleItemView = Backbone.View.extend({
    tagName: "div",
    className: "bcrumbs-single-list-item bcrumbs-listing",
    initialize: function(options) {
      this.current = "none";
      return this.template = options.template;
    },
    events: {
      "mouseover .icon-info-sign": "onShowInfo",
      "mouseover .icon-plus": "onShowAdd",
      "mouseover .icon-edit": "onShowEdit",
      "mouseover .icon-list": "onShowLists",
      "mouseover .icon-star": "onShowReviews",
      "click .icon-info-sign": "onClickInfo",
      "click .icon-plus": "onClickAdd",
      "click .icon-ok": "onClickRemove",
      "click .icon-edit": "onClickEdit",
      "click .icon-list": "onClickLists",
      "click .icon-star": "onClickReviews",
      "click .icon-minus-sign": "onClickDelete",
      "mouseout .bcrumbs-single-icons": "onExit",
      "click .bc-list-checkbox": "onCheckToggle",
      "click .btn-info": "saveNotes",
      "keypress textarea": "changeNote",
      "click .close": "closeHover"
    },
    closeHover: function() {
      this.$('.img-overlay-text').hide();
      this.$('.img-overlay').hide();
      return this.current = "none";
    },
    changeNote: function(e) {
      return this.$(".btn-success").addClass("btn-info").removeClass("btn-success");
    },
    saveNotes: function(e) {
      var note_text;
      note_text = this.$("textarea").val();
      this.model.set("notes", note_text);
      this.$(".btn-info").addClass("btn-success");
      this.$(".btn-info").removeClass("btn-info");
      return LOAF.appView.saveApplication();
    },
    onClickInfo: function(e) {
      if (this.current === "info") {
        return this.current = "none";
      } else {
        this.current = "info";
        return this.onShowInfo(e);
      }
    },
    onClickLists: function(e) {
      if (this.current === "lists") {
        return this.current = "none";
      } else {
        this.current = "lists";
        return this.onShowLists(e);
      }
    },
    onClickReviews: function(e) {
      if (this.current === "reviews") {
        return this.current = "none";
      } else {
        this.current = "reviews";
        return this.onShowReviewss(e);
      }
    },
    onClickAdd: function(e) {
      var allCrumbsBox;
      this.$(".icon-plus").addClass("icon-ok").removeClass("icon-plus");
      this.$(".add-message").empty().append("Added to your Crumbs!");
      LOAF.allCrumbsList.add(this.model);
      allCrumbsBox = _.filter(this.$('.bc-list-checkbox'), function(chkbx) {
        return chkbx.dataset.id === "0";
      });
      return $(allCrumbsBox[0]).prop("checked", "checked");
    },
    onClickRemove: function(e) {
      var _this = this;
      console.log("onclick");
      this.$(".icon-ok").addClass("icon-plus").removeClass("icon-ok");
      LOAF.allCrumbsList.remove(this.model);
      this.model;
      _.each(this.model.get("listIds"), function(id) {
        var list;
        list = LOAF.customLists.where({
          id: id
        })[0];
        if (list != null) {
          list.remove(_this.model.id);
          return _this.model.attributes.listIds = _.without(_this.model.attributes.listIds, list.id);
        }
      });
      return this.$(".bc-list-checkbox").prop("checked", false);
    },
    onClickEdit: function() {
      if (this.current === "notes") {
        return this.current = "none";
      } else {
        return this.current = "notes";
      }
    },
    onClickDelete: function() {
      this.$el.hide();
      return this.collection.remove(this.model);
    },
    onShowInfo: function() {
      if (this.current === "info" || this.current === "none") {
        this.$(".img-overlay-text >span").hide();
        this.$(".img-overlay-text").show();
        this.$(".img-overlay").show();
        return this.$(".bc-list-view-single-info").show();
      }
    },
    onShowAdd: function() {
      if (this.current === "none") {
        this.$(".img-overlay-text >span").hide();
        this.$(".img-overlay-text").show();
        this.$(".img-overlay").show();
        return this.$(".bc-list-view-single-add").show();
      }
    },
    onShowLists: function() {
      if (this.current === "lists" || this.current === "none") {
        this.$(".img-overlay-text >span").hide();
        this.$(".img-overlay-text").show();
        this.$(".img-overlay").show();
        return this.$(".bc-list-view-single-lists").show();
      }
    },
    onShowReviews: function() {
      if (this.current === "reviews" || this.current === "none") {
        this.$(".img-overlay-text >span").hide();
        this.$(".img-overlay-text").show();
        this.$(".img-overlay").show();
        return this.$(".bc-list-view-single-reviews").show();
      }
    },
    onShowEdit: function() {
      if (this.current === "edit" || this.current === "none") {
        this.$(".img-overlay-text >span").hide();
        this.$(".img-overlay-text").show();
        this.$(".img-overlay").show();
        return this.$(".bc-list-view-single-notes").show();
      }
    },
    onExit: function() {
      if (this.current === "none") {
        this.$(".img-overlay-text").hide();
        return this.$(".img-overlay").hide();
      }
    },
    onCheckToggle: function(e) {
      var allCrumbsCheck, chkbx, el, listId,
        _this = this;
      chkbx = $(e.srcElement);
      listId = e.srcElement.dataset.id;
      if (listId === "0") {
        el = this.$(".icon-plus, .icon-ok");
        el.toggleClass("icon-ok").toggleClass("icon-plus");
      }
      if (chkbx.prop("checked")) {
        LOAF.allCrumbsList.add(this.model);
        allCrumbsCheck = _.find(this.$(".bc-list-checkbox"), function(eachCheck) {
          return eachCheck.dataset.id === "0";
        });
        $(allCrumbsCheck).prop("checked", true);
        el = this.$(".icon-plus, .icon-ok");
        el.removeClass("icon-plus").removeClass("icon-ok").addClass("icon-ok");
        return LOAF.customLists.where({
          id: parseInt(listId)
        })[0].add(this.model);
      } else {
        LOAF.customLists.where({
          id: parseInt(listId)
        })[0].remove(this.model);
        if (listId === "0") {
          try {
            return _.each(this.model.get("listIds"), function(id) {
              var list;
              list = LOAF.customLists.where({
                id: id
              })[0];
              if (list != null) {
                list.remove(_this.model.id);
                return _this.model.attributes.listIds = _.without(_this.model.attributes.listIds, list.id);
              }
            });
          } finally {
            this.$(".bc-list-checkbox").prop("checked", false);
          }
        }
      }
    },
    render: function() {
      var checkboxes,
        _this = this;
      this.$el.html(Mustache.render(this.template, this.model.attributes));
      checkboxes = "";
      _.each(LOAF.customLists.getLists(), function(list) {
        var obj;
        obj = {
          id: list.id,
          name: list.name
        };
        obj.checked = _.contains(_this.model.get("listIds"), obj.id);
        return checkboxes += Mustache.render(LOAF.templates.bcListCheckboxS, obj);
      });
      this.$(".bc-list-checkboxes").html(checkboxes);
      if (LOAF.allCrumbsList.get(this.model.id)) {
        this.$(".icon-plus").addClass("icon-ok").removeClass("icon-plus");
      }
      return this;
    }
  });

}).call(this);
