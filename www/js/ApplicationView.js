// Generated by CoffeeScript 1.4.0
(function() {

  LOAF.ApplicationView = LOAF.BreadcrumbView.extend({
    initialize: function() {
      var _this = this;
      this.initHistory();
      this.$(".bcrumbs-view").hide();
      this.$(".saving-cat").hide();
      this.loadingTimeout = setTimeout(function() {
        return _this.$(".bcrumbs-loading").show();
      }, 500);
      return this.startApplication(this.onStart, this);
    },
    onStart: function() {
      clearTimeout(this.loadingTimeout);
      this.$(".bcrumbs-loading").hide();
      this.addCrumbsView = new LOAF.AddCrumbsView({
        el: this.$(".bcrumbs-yelp-view")
      });
      this.myCrumbsView = new LOAF.MyCrumbsView({
        el: this.$(".bcrumbs-mycrumbs-view")
      });
      this.addCrumbsView.render();
      this.myCrumbsView.render();
      return this.$(".bcrumbs-mycrumbs-view").show();
    },
    startApplication: function(cb, context) {
      var loadApp,
        _this = this;
      return loadApp = new LOAF.FsJsonObject({
        onReady: function(fs) {
          var data;
          data = fs.getObject();
          if (data.sessionExists) {
            return _this._loadSession(data, cb, context);
          } else {
            return _this._retrieveApiKeysFromUser(cb, context);
          }
        }
      });
    },
    events: {
      "click .bcrumbs-add-crumbs-link": "showAddCrumbs",
      "click .bcrumbs-my-crumbs-link": "showMyCrumbs",
      "click .bcrumbs-header .add-on": "searchLists",
      "click .bc-footer-links > a": "showInstructions",
      "click .bcrumbs-undo": "onUndo",
      "click .bcrumbs-undo-hide": "hideUndo"
    },
    setUndo: function(text, command, f) {
      var html,
        _this = this;
      html = "" + text + " <a href=\"javascript:void(0)\" class=\"bcrumbs-undo\">" + command + "</a> (<a href=\"javascript:void(0)\" class=\"bcrumbs-undo-hide\">hide this</a>)";
      this.$(".bcrumbs-message p").html(html);
      this.$(".bcrumbs-alert").animate({
        top: "75px"
      });
      setTimeout((function() {
        return _this.hideUndo();
      }), 15000);
      return this.undo = f;
    },
    onUndo: function(e) {
      e.preventDefault();
      this.undo();
      return this.hideUndo();
    },
    hideUndo: function(e) {
      return this.$(".bcrumbs-alert").animate({
        top: "0px"
      });
    },
    searchLists: function(e) {
      var el, searchArray, searchResults, searchTerm;
      e.preventDefault();
      searchTerm = $(".bcrumbs-crumbs-search-input").val();
      if (searchTerm) {
        searchArray = LOAF.customLists.search(searchTerm);
        el = $(".bcrumbs-list-view");
        searchResults = new LOAF.CustomList(searchArray, {
          name: "Search for: " + searchTerm
        });
        if (LOAF.singleListView != null) {
          LOAF.singleListView.undelegateEvents();
        }
        LOAF.singleListView = new LOAF.SingleListView({
          collection: searchResults,
          el: el,
          caller: {
            title: "My Crumbs",
            view: this.myCrumbsView
          },
          type: "custom"
        });
        LOAF.singleListView.render();
        this.$(".bcrumbs-view").hide();
        el.show();
        LOAF.singleListView.postRender();
        $(".edit-toggle").hide();
        return $(".edit-mode").hide();
      }
    },
    showAddCrumbs: function(e) {
      e.preventDefault();
      this.addCrumbsView.render();
      this.$(".bcrumbs-view").hide();
      this.$(".bcrumbs-yelp-view").show();
      return this.myCrumbs = !this.myCrumbs;
    },
    showMyCrumbs: function(e) {
      e.preventDefault();
      this.myCrumbsView.render();
      this.$(".bcrumbs-view").hide();
      this.$(".bcrumbs-mycrumbs-view").show();
      return this.myCrumbs = !this.myCrumbs;
    },
    showInstructions: function(e) {
      e.preventDefault();
      this.$(".bcrumbs-view").hide();
      this.$(".bcrumbs-instructions-view").show();
      return this.myCrumbs = !this.myCrumbs;
    },
    saveApplication: function() {
      var object;
      $(".saving-cat").show();
      object = {};
      object.sessionExists = true;
      object.yelpLists = LOAF.yelpLists.getLists();
      object.customLists = LOAF.customLists.getLists();
      object.categories = LOAF.categories;
      object.location = LOAF.location;
      object.auth = LOAF.auth;
      return new LOAF.FsJsonObject({
        read: false,
        onReady: function(newSave) {
          return newSave.writeObject(object, function() {
            console.log("Save complete");
            return setTimeout(function() {
              return $(".saving-cat").hide();
            }, 1000);
          });
        }
      });
    },
    _retrieveApiKeysFromUser: function(cb, context) {
      var apiView;
      apiView = new LOAF.ApiView({
        callback: this._retrieveCategoriesFromUser,
        cbContext: this,
        cbParams: [cb, context],
        el: this.$(".bcrumbs-api-login")
      });
      clearTimeout(this.loadingTimeout);
      this.$(".bcrumbs-loading").hide();
      return apiView.$el.show();
    },
    _retrieveCategoriesFromUser: function(cb, context) {
      this.obView = new LOAF.OnboardView({
        el: this.$(".bcrumbs-onboard"),
        callback: this._newSession,
        cbContext: this,
        cbParams: [cb, context]
      });
      clearTimeout(this.loadingTimeout);
      this.$(".bcrumbs-loading").hide();
      this.obView.render();
      return this.$(".bcrumbs-onboard").show();
    },
    _newSession: function(cb, context) {
      var categoryLists,
        _this = this;
      this.loadingTimeout = setTimeout(function() {
        return _this.$(".bcrumbs-loading").show();
      }, 500);
      LOAF.yelpLists = new LOAF.ListsList;
      LOAF.customLists = new LOAF.ListsList;
      LOAF.allCrumbsList = new LOAF.CustomList([], {
        name: "All Crumbs",
        isAllCrumbs: true
      });
      LOAF.customLists.addList(LOAF.allCrumbsList);
      categoryLists = _.map(LOAF.categories, function(cat) {
        var list;
        list = new LOAF.YelpList([], {
          category: cat.category,
          title: cat.title
        });
        return list;
      });
      LOAF.yelpLists.addLists(categoryLists);
      return LOAF.yelpLists.fetchLists((function() {
        _this.saveApplication();
        return cb.call(context);
      }), function(collection, xhr, options) {
        return console.log(xhr);
      });
    },
    _loadSession: function(session, cb, context) {
      var cLs, tempCLs, tempYLs, yLs;
      console.log(session);
      LOAF.categories = session.categories;
      LOAF.location = session.location;
      LOAF.auth = session.auth;
      yLs = session.yelpLists;
      tempYLs = [];
      _.each(yLs, function(yL) {
        return tempYLs.push(new LOAF.YelpList(yL.models, {
          category: yL.category,
          term: yL.term,
          title: yL.title,
          id: yL.id
        }));
      });
      LOAF.yelpLists = new LOAF.ListsList({
        lists: tempYLs
      });
      cLs = session.customLists;
      tempCLs = [];
      _.each(cLs, function(cL) {
        var customList;
        customList = new LOAF.CustomList(cL.models, {
          name: cL.name,
          isAllCrumbs: cL.isAllCrumbs,
          id: cL.id
        });
        tempCLs.push(customList);
        if (customList.isAllCrumbs) {
          return LOAF.allCrumbsList = customList;
        }
      });
      LOAF.customLists = new LOAF.ListsList({
        lists: tempCLs
      });
      return cb.call(context);
    }
  });

}).call(this);
